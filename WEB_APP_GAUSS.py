import numpy as np
import streamlit as st
import pandas as pd

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh Gauss",
    page_icon="üßÆ",
    layout="wide"
)

# Ti√™u ƒë·ªÅ ·ª©ng d·ª•ng
st.title("üßÆ Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh tuy·∫øn t√≠nh b·∫±ng ph∆∞∆°ng ph√°p Gauss")
st.markdown("---")

# Ph·∫ßn nh·∫≠p li·ªáu trong sidebar
with st.sidebar:
    st.header("‚öôÔ∏è Nh·∫≠p th√¥ng tin h·ªá ph∆∞∆°ng tr√¨nh")
    n = st.slider("S·ªë ·∫©n c·ªßa h·ªá", 2, 5, 3)
    
    st.subheader("Ma tr·∫≠n h·ªá s·ªë A:")
    A = np.zeros((n, n))
    for i in range(n):
        cols = st.columns(n)
        for j in range(n):
            A[i,j] = cols[j].number_input(f"A[{i+1},{j+1}]", value=float(1 if i==j else 0), key=f"a_{i}_{j}")
    
    st.subheader("Vector h·ªá s·ªë t·ª± do b:")
    b = np.zeros(n)
    for i in range(n):
        b[i] = st.number_input(f"b[{i+1}]", value=float(i+1), key=f"b_{i}")

# H√†m gi·∫£i Gauss v·ªõi b·∫£ng h·ªôi t·ª•
def gauss_elimination_with_table(A, b):
    n = len(b)
    Ab = np.column_stack((A.astype(float), b.astype(float)))
    convergence_data = []
    
    # Th√™m tr·∫°ng th√°i ban ƒë·∫ßu
    initial_x = np.zeros(n)
    convergence_data.append({
        "B∆∞·ªõc": 0,
        **{f"x[{i+1}]": initial_x[i] for i in range(n)},
        "Sai s·ªë": "-",
        "S·ªë ƒëi·ªÅu ki·ªán": np.linalg.cond(A)
    })
    
    for step in range(n):
        # Pivotting
        max_row = np.argmax(np.abs(Ab[step:, step])) + step
        Ab[[step, max_row]] = Ab[[max_row, step]]
        
        # Chu·∫©n h√≥a h√†ng ch√≠nh
        pivot = Ab[step, step]
        if np.isclose(pivot, 0):
            st.error("Ma tr·∫≠n suy bi·∫øn trong qu√° tr√¨nh t√≠nh to√°n!")
            return None, None, None
        
        Ab[step] = Ab[step] / pivot
        
        # Kh·ª≠ c√°c h√†ng d∆∞·ªõi
        for row in range(step + 1, n):
            Ab[row] = Ab[row] - Ab[row, step] * Ab[step]
        
        # T√≠nh nghi·ªám t·∫°m th·ªùi
        temp_x = np.zeros(n)
        for i in range(step, -1, -1):
            temp_x[i] = Ab[i, -1] - np.dot(Ab[i, i+1:n], temp_x[i+1:])
        
        # T√≠nh sai s·ªë
        error = np.max(np.abs(temp_x - [convergence_data[-1][f"x[{i+1}]"] for i in range(n)])) if step > 0 else "-"
        
        convergence_data.append({
            "B∆∞·ªõc": step+1,
            **{f"x[{i+1}]": temp_x[i] for i in range(n)},
            "Sai s·ªë": f"{error:.4e}" if step > 0 else "-",
            "S·ªë ƒëi·ªÅu ki·ªán": np.linalg.cond(Ab[:, :-1])
        })
    
    # Th·∫ø ng∆∞·ª£c cu·ªëi c√πng
    x = np.zeros(n)
    for i in range(n-1, -1, -1):
        x[i] = Ab[i, -1] - np.dot(Ab[i, i+1:n], x[i+1:])
    
    return x, pd.DataFrame(convergence_data), Ab

# Hi·ªÉn th·ªã k·∫øt qu·∫£
if st.button("üîç Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh", type="primary"):
    st.markdown("---")
    
    # Ki·ªÉm tra ƒëi·ªÅu ki·ªán
    det_A = np.linalg.det(A)
    cond_A = np.linalg.cond(A)
    
    col1, col2 = st.columns(2)
    col1.metric("ƒê·ªãnh th·ª©c det(A)", f"{det_A:.6f}")
    col2.metric("S·ªë ƒëi·ªÅu ki·ªán cond(A)", f"{cond_A:.6f}")
    
    if np.isclose(det_A, 0):
        st.error("H·ªá ph∆∞∆°ng tr√¨nh suy bi·∫øn (det(A) ‚âà 0)!")
        st.stop()
    
    # Gi·∫£i h·ªá
    with st.spinner("ƒêang gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh..."):
        x, convergence_df, final_Ab = gauss_elimination_with_table(A, b)
    
    if x is None:
        st.stop()
    
    # Hi·ªÉn th·ªã nghi·ªám
    st.subheader("üéØ Nghi·ªám c·ªßa h·ªá ph∆∞∆°ng tr√¨nh")
    cols = st.columns(n)
    for i in range(n):
        cols[i].metric(label=f"x[{i+1}]", value=f"{x[i]:.8f}")
    
    # B·∫£ng h·ªôi t·ª•
    st.markdown("---")
    st.subheader("üìä B·∫£ng qu√° tr√¨nh h·ªôi t·ª•")
    st.dataframe(
        convergence_df,
        width=1000,
        height=400,
        hide_index=True,
        column_config={
            "B∆∞·ªõc": st.column_config.NumberColumn(format="%d"),
            **{f"x[{i+1}]": st.column_config.NumberColumn(format="%.6f") for i in range(n)},
            "Sai s·ªë": st.column_config.TextColumn(),
            "S·ªë ƒëi·ªÅu ki·ªán": st.column_config.NumberColumn(format="%.2f")
        }
    )
    
    # Ki·ªÉm tra nghi·ªám
    st.subheader("‚úÖ Ki·ªÉm tra nghi·ªám")
    residual = np.dot(A, x) - b
    st.write("**Sai s·ªë:** A*x - b =")
    st.dataframe(
        pd.DataFrame(residual, columns=["Sai s·ªë"]),
        width=300
    )

# H∆∞·ªõng d·∫´n
with st.expander("üìñ H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng"):
    st.write("""
    1. Nh·∫≠p s·ªë ·∫©n v√† c√°c h·ªá s·ªë
    2. Nh·∫•n n√∫t **Gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh**
    3. Xem:
       - Nghi·ªám c·ªßa h·ªá
       - B·∫£ng qu√° tr√¨nh h·ªôi t·ª•
       - Ki·ªÉm tra sai s·ªë nghi·ªám
    """)

st.markdown("---")
st.caption("¬© 2023 - ·ª®ng d·ª•ng gi·∫£i h·ªá ph∆∞∆°ng tr√¨nh tuy·∫øn t√≠nh")