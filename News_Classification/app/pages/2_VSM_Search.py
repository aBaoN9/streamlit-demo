import streamlit as st, pandas as pd, sys
from pathlib import Path
PROJECT_ROOT = Path(__file__).resolve().parents[2]
if str(PROJECT_ROOT) not in sys.path: sys.path.append(str(PROJECT_ROOT))

from src.search import explain_search
from src.history import append_history

st.set_page_config(page_title="VSM Search", layout="wide")
st.title("üîç VSM Search")

query = st.text_input("Nh·∫≠p truy v·∫•n (ti·∫øng Anh):", placeholder="e.g., election results and budget policy")
top_k = st.slider("S·ªë k·∫øt qu·∫£:", 3, 10, 5)
topk_terms = st.slider("S·ªë t·ª´ TF-IDF n·ªïi b·∫≠t hi·ªÉn th·ªã:", 6, 20, 12)

if st.button("T√¨m ki·∫øm"):
    if query.strip():
        exp = explain_search(query, k=top_k, topk_terms=topk_terms)

        st.subheader("üß© T·ª´ kh√≥a TF-IDF n·ªïi b·∫≠t c·ªßa query")
        st.dataframe(pd.DataFrame(exp["top_terms_query"], columns=["term","tfidf"]))

        st.subheader("üìÉ K·∫øt qu·∫£ top-k (c√≥ t·ª´ kh√≥a tr√πng)")
        rows = []
        for r in exp["results"]:
            rows.append({
                "Similarity": r["similarity"],
                "Label": r["label"],
                "Overlap terms": ", ".join(r["overlap_terms"]),
                "Snippet": r["snippet"]
            })
        st.dataframe(pd.DataFrame(rows))

        append_history({
            "type": "vsm",
            "query": query,
            "k": top_k,
            "top_terms": [t for t,_ in exp["top_terms_query"]]
        })
    else:
        st.warning("B·∫°n c·∫ßn nh·∫≠p query tr∆∞·ªõc.")

