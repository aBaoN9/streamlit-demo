# --- add these 3 lines at top ---
import sys, os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))
# ---------------------------------

import streamlit as st
import joblib, io
import matplotlib.pyplot as plt
import numpy as np

from src.config import MODELS_DIR
MODEL_PATH = MODELS_DIR / "decision_tree_rating_regressor.pkl"

st.title("üå≥ Tree Visualizer ‚Äî Decision Tree (rating)")

# Load model
try:
    pipe = joblib.load(MODEL_PATH)
except Exception as e:
    st.error(f"Kh√¥ng load ƒë∆∞·ª£c model: {e}\nH√£y ch·∫°y: `python -m src.train_tree` tr∆∞·ªõc.")
    st.stop()

# L·∫•y preprocessor & tree t·ª´ pipeline
try:
    preproc = pipe.named_steps["prep"]
    tree = pipe.named_steps["tree"]
except Exception as e:
    st.error(f"Pipeline kh√¥ng ƒë√∫ng c·∫•u tr√∫c: {e}")
    st.stop()

# L·∫•y t√™n feature sau OneHotEncoder
try:
    feat_names = preproc.get_feature_names_out()
except Exception:
    # fallback cho scikit-learn c≈©
    feat_names = np.array([f"f{i}" for i in range(preproc.transformers_[0][2].__len__())])

# Sidebar controls
max_depth_show = st.sidebar.slider("ƒê·ªô s√¢u hi·ªÉn th·ªã", 1, int(tree.get_depth()) if hasattr(tree, "get_depth") else 6, 3)
dpi = st.sidebar.slider("ƒê·ªô ph√¢n gi·∫£i (dpi)", 80, 300, 120, step=20)

# V·∫Ω c√¢y (gi·ªõi h·∫°n ƒë·ªô s√¢u ƒë·ªÉ d·ªÖ nh√¨n)
from sklearn.tree import plot_tree
fig, ax = plt.subplots(figsize=(16, 10), dpi=dpi)
plot_tree(
    tree,
    feature_names=feat_names,
    filled=True,
    rounded=True,
    max_depth=max_depth_show,
    impurity=True,   # v·ªõi regression s·∫Ω l√† MSE
    fontsize=8,
    ax=ax
)
st.pyplot(fig, use_container_width=True)

# T·∫£i ·∫£nh
buf = io.BytesIO()
fig.savefig(buf, format="png", bbox_inches="tight")
st.download_button("‚¨áÔ∏è T·∫£i ·∫£nh c√¢y (PNG)", data=buf.getvalue(), file_name=f"decision_tree_depth_{max_depth_show}.png", mime="image/png")

st.markdown("---")

# Hi·ªÉn th·ªã ƒë·ªô quan tr·ªçng ƒë·∫∑c tr∆∞ng
if hasattr(tree, "feature_importances_"):
    importances = tree.feature_importances_
    # G·ªôp c√°c one-hot c·ªßa c√πng m·ªôt tr∆∞·ªùng n·∫øu mu·ªën (advanced) ‚Äî t·∫°m th·ªùi hi·ªÉn th·ªã tr·ª±c ti·∫øp
    top_k = st.slider("Hi·ªán top-k ƒë·∫∑c tr∆∞ng quan tr·ªçng", 5, min(30, len(importances)), 10)
    order = np.argsort(importances)[::-1][:top_k]
    st.subheader("üî• Top ƒë·∫∑c tr∆∞ng quan tr·ªçng")
    for idx in order:
        if importances[idx] > 0:
            st.write(f"- **{feat_names[idx]}**: {importances[idx]:.4f}")
    # (tu·ª≥ ch·ªçn) v·∫Ω bar chart
    try:
        import plotly.express as px
        import pandas as pd
        df_imp = pd.DataFrame({"feature": feat_names[order], "importance": importances[order]})
        st.plotly_chart(px.bar(df_imp, x="importance", y="feature", orientation="h"), use_container_width=True)
    except Exception:
        pass
else:
    st.info("Model kh√¥ng c√≥ thu·ªôc t√≠nh feature_importances_.")
